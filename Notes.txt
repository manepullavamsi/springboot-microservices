Session : 1
  Introduction to Microservices Arichteture:
      >Microservices Arichteture Style where large application can composed of small services that provide specfic business capablites that can deployed and managed Indepedently.
      >When we creating microservices we need to divide our services based on Business Capablities not by Technical Capablites and we should be able to deploy ,run and manage our services independently. 

  Monolithics VS Microservices -Pros & Cons:
Monolithic: 
    Where a large Application would be deployed as a single Service and It will connect to Database It would be relatively big application but where intercommunicating of features would be essay as we had devloped in a single application and debuging would be essay and Essay deployment and Eassy for testing as we can avoid mutiple mocking as we have limited external services.
Con's:
  Diffcult to scale sub systems(Modules)
  Diffcult to adpot new Technologies
  Higher chance to become big ball of Mud as over the time application evlove with multiple features.
MicroServices:
  In order to overcome issues with Monolithic Microservice Arichteture eveloved but It doesn't mean microservices is go to solution we need to analysis and need to decide which would be better according to our requirement. 
  PROS's: we can scale indvidual Services
          Smaller Code Bases essaier to understand Application
          Essaier to adpot new Technologies
          Lesser dependencies on other Team Develivarables
CORN'S: Diffcult to build & Mange Distrubed Applications
        Diffcult to test & Debug
        Complex deploymement Process
        Performance Issues
While Making Tech Decesions In terms of Techstack We need to think in all different perceptives Wether We can run the stack we choose in production do we have skilled person on that techstack we have any issues and If it is new techstack wether team adapt quickly and can devlvery with the business Deadline
  Project Development Environment Preparation:
      As we are using Microservice Archteture we can use Spring cloud Config where we can store our config in repository or database or consul and where we can maintain centralized configuration for all applications. But in our series we would be using application propeties file or we would be overriding using env variables but when we are deploying kubernetes ENV we can see how we can do with config maps and config secrets.
Service Registry:
    Spring cloud based application mutiple Service Registry services like Eureka,COnsul
    We would be running mutiple instances of each service and when client make a call to service then This Service Registry(Eureka) comes into place and route the request to available instance of service.
Generally the Services would be registy with Service Registry as a service with unique name and service registry look for instances which running with that name and when any particular call have been invoked to the service service registry routes request to the available instance. But in Kuberentes It might be not help ful as we have service concepts in kubernetes which act as loabbalancer and and each instance would be running as pod.

Session:2

Create Catalog-service working Skelton:

Configure Code Formatting Swagger
Setup Docker Compose for local Developemnt
Setup Contionues Integration using Github Actions
